##from tkinter import*
##w=12
##h=2
##tool="pen"
##pen_color="black"
##pen_size=2
##draw_size=10
##draw_color="white"
##
##
##def change_tool(t):
##    global tool
##    tool=t
##
##def paint(event):
##    global pen_color
##    global pen_size
##    x1,y1=event.x,event.y
##    x2,y2=event.x+pen_size,event.y+pen_size
##    canvas.create_line(x1,y1,x2,y2,fill=pen_color,width=pen_size)
##def change_size(btn):
##    global pen_size
##    global draw_size
##    global tool
##    if tool=="pen":
##        if btn=="plus":
##            pen_size+=1
##        elif btn=="minus"and pen_size>2:
##            pen_size-=1
##    else:
##        if btn=="plus":
##            draw_size+=1
##        elif btn=="minus"and draw_size>10:
##            draw_size-=10
##            
##        
##        if pen_size<1:
##            pen_size=1
##def draw_shape(event):
##    global draw_color
##    global draw_size
##    x1, y1=event.x, event.y
##    x2, y2=event.x+draw_size, event.y+draw_size
##
##    if tool == "circle" :
##        canvas.create_oval(x1 , y1, x2, y2, fill = draw_color)
##    elif tool == "quadrangle" :
##        canvas.create_rectangle(x1, y1, x2, y2, fill = draw_color)
##    elif tool == "triangle" :
##        canvas.create_polygon(x1, y1, x2, y2, (x1 - (draw_size)), y2, fill = draw_color, outline = "black")  
##
##def change_color(color):
##    global pen_color, canvas_color, draw_color
##    if tool=="canvas":
##        btn_canvas_color["bg"]=color
##        canvas['bg'] = color
##    elif tool=="pen":
##        btn_pen_color["bg"]=color
##        pen_color = color
##    elif tool=="fill":
##        btn_fill_color["bg"]=color
##        draw_color = color
##
##def clear_canvas():
##    canvas.delete("all")
##
##win=Tk()
##canvas=Canvas(win,bg="white",width=500,height=500)
##btn_canvas_color=Button(win,text="canvas\ncolor",bg="white",width=w,command=lambda:change_tool("canvas"))
##btn_black=Button(win,text="black",bg="black",width=w,height=2,fg="white",command=lambda:change_color("black"))
##btn_blue=Button(win,text="blue",bg="blue",width=w,height=2,fg="white",command=lambda:change_color("blue"))
##btn_green=Button(win,text="green",bg="green",width=w,height=2,fg="white",command=lambda:change_color("green"))
##btn_plus=Button(win,text="+",bg="white",width=w,height=2,command=lambda:change_size("plus"))
##
##btn_pen_color=Button(win,text="pen\ncolor",bg="white",width=w,command=lambda:change_tool("pen"))
##btn_white=Button(win,text="white",bg="white",width=w,height=2,command=lambda:change_color("white"))
##btn_red=Button(win,text="red",bg="red",width=w,height=2,fg="white",command=lambda:change_color("red"))
##btn_yellow=Button(win,text="yellow",bg="yellow",width=w,height=2,command=lambda:change_color("yellow"))
##btn_minus=Button(win,text="-",bg="white",width=w,height=2,command=lambda:change_size("minus"))
##
##btn_fill_color=Button(win,text="fill\ncolor",bg="white",width=w,command=lambda:change_tool("fill"))
##btn_circle=Button(win,text="○",bg="white",width=w,height=2,command=lambda:change_tool("circle"))
##btn_quadrangle=Button(win,text="□",bg="white",width=w,height=2,command=lambda:change_tool("quadrangle"))
##btn_triangle=Button(win,text="△",bg="white",width=w,height=2,command=lambda:change_tool("triangle"))
##btn_clear=Button(win,text="clear",bg="white",width=w,height=2,command=clear_canvas)
##
##canvas.grid(row=0,column=0,columnspan=5)
##
##btn_canvas_color.grid(row=1,column=0)
##btn_black.grid(row=1,column=1)
##btn_blue.grid(row=1,column=2)
##btn_green.grid(row=1,column=3)
##btn_plus.grid(row=1,column=4)
##
##btn_pen_color.grid(row=2,column=0)
##btn_white.grid(row=2,column=1)
##btn_red.grid(row=2,column=2) 
##btn_yellow.grid(row=2,column=3)       
##btn_minus.grid(row=2,column=4)
##
##btn_fill_color.grid(row=3,column=0)
##btn_circle.grid(row=3,column=1)
##btn_quadrangle.grid(row=3,column=2)
##btn_triangle.grid(row=3,column=3)
##btn_clear.grid(row=3,column=4)
##canvas.bind("<B1-Motion>",paint)
##canvas.bind("<Double-Button-1>",draw_shape)
##win.mainloop()
##from calculator import*
##x=int(input("x: "))
##y=int(input("y: "))
##add(x,y)
##sub(x,y)
##mul(x,y)
##div(x,y)

##from tkinter import*
##w,h=745,374
##win=Tk()
##canvas=Canvas(win,width=w,height=h)
##img=PhotoImage(file="court.png")
##canvas.create_image(w/2,h/2,image=img)
##canvas.pack()
##win.mainloop()

##from tkinter import*
##win=Tk()
##x1,y1=10,10
##x2,y2=x1+30,y1+30
##x_dist,y_dist=1,1
##canvas=Canvas(win,width=200,height=200,bg="white")
##ball=canvas.create_oval(x1,y1,x2,y2,fill="yellow")
##def flow():
##    global x1,y1,x2,y2
##    x1+=x_dist
##    y1+=y_dist
##    x2,y2=x1+30,y1+30
##    canvas.coords(ball,x1,y1,x2,y2)
##    win.after(10,flow)
##flow()
##canvas.pack()
##win.mainloop()
##def add(x,y):
##    print(x+y)
##def sub(x,y):
##    print(x-y)
##def mul(x,y):
##    print(x*y)
##def div(x,y):
##    print(x//y)

(mainn)
from tkinter import*
from court import*
from ball import*
width,height=745,374
win=Tk()
win.title("Tennis Game")
win.geometry("745x374+150+150")
win.resizable(False,False)
court=Court(win,745,374,"court.png")
x1,y1=width/2,height/2
x2,y2=x1+30,y1+30
ball=Ball(court,x1,y1,x2,y2)
def play_game():
    ball.move_ball()
    win.after(50,play_game)
play_game()
win.mainloop()

(ball.py)
from tkinter import *

class Ball :
    def __init__ (self, court, x1, y1, x2, y2) :
        # 공의 좌표 초기화하기
        self.x1 = x1                            
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2

        # 공의 이동 거리 초기화하기
        self.x_dist = -10
        self.y_dist = -10
	
	# 공의 가로, 세로 길이 초기화하기
        self.width = x2 -x1
        self.height = y2 - y1

	# Court 클래스 객체 저장하기
        self.court = court

	# Court 클래스의 캔버스 저장하기
        self.canvas = court.canvas

	# 캔버스에 공 생성
        self.ball = self.canvas.create_oval(x1, y1, x2, y2, fill = "red")

 	
    # 공을 움직이는 메소드 정의하기
    def move_ball(self) :
        self.x1 += self.x_dist
        self.y1 += self.y_dist     
        # 위쪽 벽 충돌하면 방향 바꾸기
        if self.y1 <= 5 :
            self.y1=5
            self.y_dist *= -1
        # 아래쪽 벽 충돌하면 방향 바꾸기
        if self.y1 >= (self.court.height - (self.height - 5)) :
            self.y1 = self.court.height - (self.height - 5)
            self.y_dist *= -1

        # 왼쪽 벽 충돌하면 방향 바꾸기
	# 왼쪽, 오른쪽 벽 충돌 시 방향 바꾸는 것을 주석을 풀고 확인해 보세요. 
        if self.x1 <= 5 :
               self.x1 = 5
               self.x_dist *= -1
 	    # self.stop_ball()        # 공 멈추기 메소드 호출

        # 오른쪽 벽 충돌하면 방향 바꾸기
        if self.x1 + self.width >= self.court.width - 5 :
            self.x_dist *= -1
 	    # self.stop_ball()       # 공 멈추기 메소드 호출
                
        # 공 이동 좌표 저장
        self.x1 = self.x1
        self.x2 = self.x1 + self.width
        self.y1 = self.y1
        self.y2 = self.y1 + self.height
        # 공 위치 변경
        self.canvas.coords(self.ball,self.x
  (court)
  from tkinter import*
class Court:
    def __init__(self,window,width,height,img):
        self.canvas=Canvas(window,width=width,height=height)
        self.img=PhotoImage(file=img)
        self.canvas.create_image(width/2,height/2,image=self.img)
        self.width=width
        self.height=height
        self.canvas.pack()
